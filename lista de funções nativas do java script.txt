                     
                           ---------lista das funções nativas básicas de arrays em JavaScript-------



1. forEach(): Faz alguma coisa para cada item do array, um por um.
   Exemplo: `[1, 2, 3].forEach(x => console.log(x));` (Imprime 1, 2 e 3 no console, um por um)


2. map(): Cria um novo array mudando todos os itens do original com base no que você quer.
   Exemplo: `[1, 2, 3].map(x => x * 2);` (Retorna `[2, 4, 6]`)


3. filter(): Cria um novo array apenas com os itens que passam por um teste.
   Exemplo: `[1, 2, 3, 4].filter(x => x > 2);` (Retorna `[3, 4]`)


4. reduce(): Pega todos os itens do array e junta eles em um único resultado.
   Exemplo: `[1, 2, 3, 4].reduce((total, x) => total + x, 0);` (Retorna `10`, que é a soma de todos os itens)


5. some(): Retorna `true` se algum dos itens passar em um teste, senão `false`.
   Exemplo: `[1, 2, 3].some(x => x > 2);` (Retorna `true`, pois o número 3 é maior que 2)


6. every(): Retorna `true` se **todos** os itens passarem em um teste, senão `false`.
   Exemplo: `[1, 2, 3].every(x => x > 0);` (Retorna `true`, pois todos os números são maiores que 0)


7. find(): Encontra o **primeiro** item que passa no teste.
   Exemplo: `[1, 2, 3, 4].find(x => x > 2);` (Retorna `3`, o primeiro maior que 2)


8. findIndex(): Encontra o **índice** (posição) do primeiro item que passa no teste.
   Exemplo: `[1, 2, 3, 4].findIndex(x => x > 2);` (Retorna `2`, que é a posição do número 3)


9. includes(): Verifica se o array contém um certo valor. Retorna `true` ou `false`.
   Exemplo: `[1, 2, 3].includes(2);` (Retorna `true`, pois 2 está no array)


10. push(): Adiciona um ou mais itens ao final do array.
    Exemplo: `let arr = [1, 2]; arr.push(3);` (Agora `arr` é `[1, 2, 3]`)


11. pop(): Remove o último item do array.
    Exemplo: `let arr = [1, 2, 3]; arr.pop();` (Agora `arr` é `[1, 2]`)


12. shift(): Remove o primeiro item do array.
    Exemplo: `let arr = [1, 2, 3]; arr.shift();` (Agora `arr` é `[2, 3]`)


13. unshift(): Adiciona um ou mais itens no início do array.
    Exemplo: `let arr = [2, 3]; arr.unshift(1);` (Agora `arr` é `[1, 2, 3]`)


14. slice(): Cria um novo array pegando uma parte do original, sem modificá-lo.
    Exemplo: `let arr = [1, 2, 3, 4]; arr.slice(1, 3);` (Retorna `[2, 3]`, pegando do índice 1 até 3)


15. splice(): Adiciona, remove ou substitui itens no array, mudando ele.
    Exemplo: `let arr = [1, 2, 3]; arr.splice(1, 1);` (Remove 1 item no índice 1, então `arr` vira `[1, 3]`)


----------------------------------------------------------------------------------------------------------------------------------------------